// <auto-generated />
using System;
using AtmAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AtmAPI.Data.Migrations
{
    [DbContext(typeof(AtmContext))]
    [Migration("20220711223243_RemoveIndexColOfSlot")]
    partial class RemoveIndexColOfSlot
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AtmAPI.Models.Entities.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AttendDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("StudentId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Available")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<bool>("EnableAutomation")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaxLearner")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Placement")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SkillId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.ClassLecturer", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("LecturerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ClassId", "LecturerId");

                    b.HasIndex("LecturerId");

                    b.ToTable("ClassLecturers");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.Lecturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComputedColumnSql("CONCAT(\r\n                'ATL', \r\n                CAST(\r\n                    SUBSTRING(\r\n                        CONVERT(VARCHAR, [CreatedAt], 111), \r\n                        0, \r\n                        CHARINDEX('/', CONVERT(VARCHAR, [CreatedAt], 111)\r\n                    )\r\n                ) AS INTEGER) % 1000, \r\n                '.', \r\n                RIGHT('000000' + CAST([Id] % 1000000 AS NVARCHAR), 6)\r\n            )", true);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DepartmentId");

                    b.ToTable("Lecturers");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.Operator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComputedColumnSql("CONCAT(\r\n                'ATO', \r\n                CAST(\r\n                    SUBSTRING(\r\n                        CONVERT(VARCHAR, [CreatedAt], 111), \r\n                        0, \r\n                        CHARINDEX('/', CONVERT(VARCHAR, [CreatedAt], 111)\r\n                    )\r\n                ) AS INTEGER) % 1000, \r\n                '.', \r\n                RIGHT('000000' + CAST([Id] % 1000000 AS NVARCHAR), 6)\r\n            )", true);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("InitialSlotId")
                        .HasColumnType("int");

                    b.Property<int>("SlotId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SlotId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.SkillCategory", b =>
                {
                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("SkillId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SkillCategories");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.SkillReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Editable")
                        .HasColumnType("bit");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Metadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("SkillReports");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.Slot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndAt")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartAt")
                        .HasColumnType("time");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("DayOfWeek", "StartAt", "EndAt")
                        .IsUnique();

                    b.ToTable("Slots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5724),
                            CreatedBy = "system",
                            DayOfWeek = 1,
                            EndAt = new TimeSpan(0, 10, 0, 0, 0),
                            StartAt = new TimeSpan(0, 8, 0, 0, 0),
                            UpdatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5724),
                            UpdatedBy = "system"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5733),
                            CreatedBy = "system",
                            DayOfWeek = 1,
                            EndAt = new TimeSpan(0, 12, 0, 0, 0),
                            StartAt = new TimeSpan(0, 10, 0, 0, 0),
                            UpdatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5733),
                            UpdatedBy = "system"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5735),
                            CreatedBy = "system",
                            DayOfWeek = 1,
                            EndAt = new TimeSpan(0, 15, 0, 0, 0),
                            StartAt = new TimeSpan(0, 13, 0, 0, 0),
                            UpdatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5735),
                            UpdatedBy = "system"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5736),
                            CreatedBy = "system",
                            DayOfWeek = 1,
                            EndAt = new TimeSpan(0, 17, 0, 0, 0),
                            StartAt = new TimeSpan(0, 15, 0, 0, 0),
                            UpdatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5736),
                            UpdatedBy = "system"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5737),
                            CreatedBy = "system",
                            DayOfWeek = 2,
                            EndAt = new TimeSpan(0, 10, 0, 0, 0),
                            StartAt = new TimeSpan(0, 8, 0, 0, 0),
                            UpdatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5737),
                            UpdatedBy = "system"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5740),
                            CreatedBy = "system",
                            DayOfWeek = 2,
                            EndAt = new TimeSpan(0, 12, 0, 0, 0),
                            StartAt = new TimeSpan(0, 10, 0, 0, 0),
                            UpdatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5740),
                            UpdatedBy = "system"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5741),
                            CreatedBy = "system",
                            DayOfWeek = 2,
                            EndAt = new TimeSpan(0, 15, 0, 0, 0),
                            StartAt = new TimeSpan(0, 13, 0, 0, 0),
                            UpdatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5741),
                            UpdatedBy = "system"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5742),
                            CreatedBy = "system",
                            DayOfWeek = 2,
                            EndAt = new TimeSpan(0, 17, 0, 0, 0),
                            StartAt = new TimeSpan(0, 15, 0, 0, 0),
                            UpdatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5742),
                            UpdatedBy = "system"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5743),
                            CreatedBy = "system",
                            DayOfWeek = 3,
                            EndAt = new TimeSpan(0, 10, 0, 0, 0),
                            StartAt = new TimeSpan(0, 8, 0, 0, 0),
                            UpdatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5743),
                            UpdatedBy = "system"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5788),
                            CreatedBy = "system",
                            DayOfWeek = 3,
                            EndAt = new TimeSpan(0, 12, 0, 0, 0),
                            StartAt = new TimeSpan(0, 10, 0, 0, 0),
                            UpdatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5788),
                            UpdatedBy = "system"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5789),
                            CreatedBy = "system",
                            DayOfWeek = 3,
                            EndAt = new TimeSpan(0, 15, 0, 0, 0),
                            StartAt = new TimeSpan(0, 13, 0, 0, 0),
                            UpdatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5789),
                            UpdatedBy = "system"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5790),
                            CreatedBy = "system",
                            DayOfWeek = 3,
                            EndAt = new TimeSpan(0, 17, 0, 0, 0),
                            StartAt = new TimeSpan(0, 15, 0, 0, 0),
                            UpdatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5790),
                            UpdatedBy = "system"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5792),
                            CreatedBy = "system",
                            DayOfWeek = 4,
                            EndAt = new TimeSpan(0, 10, 0, 0, 0),
                            StartAt = new TimeSpan(0, 8, 0, 0, 0),
                            UpdatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5792),
                            UpdatedBy = "system"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5793),
                            CreatedBy = "system",
                            DayOfWeek = 4,
                            EndAt = new TimeSpan(0, 12, 0, 0, 0),
                            StartAt = new TimeSpan(0, 10, 0, 0, 0),
                            UpdatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5793),
                            UpdatedBy = "system"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5794),
                            CreatedBy = "system",
                            DayOfWeek = 4,
                            EndAt = new TimeSpan(0, 15, 0, 0, 0),
                            StartAt = new TimeSpan(0, 13, 0, 0, 0),
                            UpdatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5794),
                            UpdatedBy = "system"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5795),
                            CreatedBy = "system",
                            DayOfWeek = 4,
                            EndAt = new TimeSpan(0, 17, 0, 0, 0),
                            StartAt = new TimeSpan(0, 15, 0, 0, 0),
                            UpdatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5795),
                            UpdatedBy = "system"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5796),
                            CreatedBy = "system",
                            DayOfWeek = 5,
                            EndAt = new TimeSpan(0, 10, 0, 0, 0),
                            StartAt = new TimeSpan(0, 8, 0, 0, 0),
                            UpdatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5796),
                            UpdatedBy = "system"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5798),
                            CreatedBy = "system",
                            DayOfWeek = 5,
                            EndAt = new TimeSpan(0, 12, 0, 0, 0),
                            StartAt = new TimeSpan(0, 10, 0, 0, 0),
                            UpdatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5798),
                            UpdatedBy = "system"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5799),
                            CreatedBy = "system",
                            DayOfWeek = 5,
                            EndAt = new TimeSpan(0, 15, 0, 0, 0),
                            StartAt = new TimeSpan(0, 13, 0, 0, 0),
                            UpdatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5799),
                            UpdatedBy = "system"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5800),
                            CreatedBy = "system",
                            DayOfWeek = 5,
                            EndAt = new TimeSpan(0, 17, 0, 0, 0),
                            StartAt = new TimeSpan(0, 15, 0, 0, 0),
                            UpdatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5800),
                            UpdatedBy = "system"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5802),
                            CreatedBy = "system",
                            DayOfWeek = 6,
                            EndAt = new TimeSpan(0, 10, 0, 0, 0),
                            StartAt = new TimeSpan(0, 8, 0, 0, 0),
                            UpdatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5802),
                            UpdatedBy = "system"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5803),
                            CreatedBy = "system",
                            DayOfWeek = 6,
                            EndAt = new TimeSpan(0, 12, 0, 0, 0),
                            StartAt = new TimeSpan(0, 10, 0, 0, 0),
                            UpdatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5803),
                            UpdatedBy = "system"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5804),
                            CreatedBy = "system",
                            DayOfWeek = 6,
                            EndAt = new TimeSpan(0, 15, 0, 0, 0),
                            StartAt = new TimeSpan(0, 13, 0, 0, 0),
                            UpdatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5804),
                            UpdatedBy = "system"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5805),
                            CreatedBy = "system",
                            DayOfWeek = 6,
                            EndAt = new TimeSpan(0, 17, 0, 0, 0),
                            StartAt = new TimeSpan(0, 15, 0, 0, 0),
                            UpdatedAt = new DateTime(2022, 7, 11, 22, 32, 43, 562, DateTimeKind.Utc).AddTicks(5805),
                            UpdatedBy = "system"
                        });
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComputedColumnSql("CONCAT(\r\n                'ATS', \r\n                CAST(\r\n                    SUBSTRING(\r\n                        CONVERT(VARCHAR, [CreatedAt], 111), \r\n                        0, \r\n                        CHARINDEX('/', CONVERT(VARCHAR, [CreatedAt], 111)\r\n                    )\r\n                ) AS INTEGER) % 1000, \r\n                '.', \r\n                RIGHT('000000' + CAST([Id] % 1000000 AS NVARCHAR), 6)\r\n            )", true);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.Attendance", b =>
                {
                    b.HasOne("AtmAPI.Models.Entities.Schedule", "Schedule")
                        .WithMany("Attendances")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtmAPI.Models.Entities.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.Class", b =>
                {
                    b.HasOne("AtmAPI.Models.Entities.Skill", "Skill")
                        .WithMany("Classes")
                        .HasForeignKey("SkillId");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.ClassLecturer", b =>
                {
                    b.HasOne("AtmAPI.Models.Entities.Class", "Class")
                        .WithMany("ClassLecturers")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtmAPI.Models.Entities.Lecturer", "Lecturer")
                        .WithMany("ClassLecturers")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.Lecturer", b =>
                {
                    b.HasOne("AtmAPI.Models.Entities.Department", "Department")
                        .WithMany("Lecturers")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.Schedule", b =>
                {
                    b.HasOne("AtmAPI.Models.Entities.Class", "Class")
                        .WithMany("Schedules")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtmAPI.Models.Entities.Slot", "Slot")
                        .WithMany("Schedules")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.SkillCategory", b =>
                {
                    b.HasOne("AtmAPI.Models.Entities.Category", "Category")
                        .WithMany("SkillCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtmAPI.Models.Entities.Skill", "Skill")
                        .WithMany("SkillCategories")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.SkillReport", b =>
                {
                    b.HasOne("AtmAPI.Models.Entities.Class", "Class")
                        .WithMany("SkillReports")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AtmAPI.Models.Entities.Student", "Student")
                        .WithMany("SkillReports")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.Category", b =>
                {
                    b.Navigation("SkillCategories");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.Class", b =>
                {
                    b.Navigation("ClassLecturers");

                    b.Navigation("Schedules");

                    b.Navigation("SkillReports");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.Department", b =>
                {
                    b.Navigation("Lecturers");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.Lecturer", b =>
                {
                    b.Navigation("ClassLecturers");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.Schedule", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.Skill", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("SkillCategories");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.Slot", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("AtmAPI.Models.Entities.Student", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("SkillReports");
                });
#pragma warning restore 612, 618
        }
    }
}
